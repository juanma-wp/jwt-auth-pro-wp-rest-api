name: Cookie Scenario Tests

on:
  push:
    branches: [main, develop, feature/cookie-scenario-testing]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test-cookie-scenarios:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        scenario:
          - same-domain
          - cross-origin
          - auto-detect
          - strict-production
        include:
          - scenario: same-domain
            name: Same Domain (Lax)
          - scenario: cross-origin
            name: Cross-Origin (None + Secure)
          - scenario: auto-detect
            name: Auto-detect (Default)
          - scenario: strict-production
            name: Strict Production

    name: Test ${{ matrix.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Start Docker containers
        run: |
          docker compose -f tests/docker/docker-compose.test.yml up -d
          echo "Waiting for WordPress to be ready..."
          sleep 30

      - name: Wait for WordPress
        run: |
          max_attempts=30
          attempt=0
          until curl -sf http://localhost:8080/wp-json/ > /dev/null; do
            attempt=$((attempt + 1))
            if [ $attempt -eq $max_attempts ]; then
              echo "WordPress did not start in time"
              docker compose -f tests/docker/docker-compose.test.yml logs wordpress
              exit 1
            fi
            echo "Waiting for WordPress... ($attempt/$max_attempts)"
            sleep 5
          done
          echo "WordPress is ready!"

      - name: Setup WordPress
        run: |
          docker compose -f tests/docker/docker-compose.test.yml exec -T wordpress wp core install \
            --url=http://localhost:8080 \
            --title="JWT Test Site" \
            --admin_user=admin \
            --admin_password=admin \
            --admin_email=admin@example.com \
            --skip-email

      - name: Activate plugin
        run: |
          docker compose -f tests/docker/docker-compose.test.yml exec -T wordpress wp plugin activate jwt-auth-pro-wp-rest-api

      - name: Configure scenario
        run: |
          node tests/scripts/configure-scenario.js ${{ matrix.scenario }}
        env:
          WP_URL: http://localhost:8080
          WP_USER: admin
          WP_PASS: admin

      - name: Run Playwright tests
        run: npm run test:e2e -- --project=${{ matrix.scenario }}
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:5173
          PLAYWRIGHT_API_URL: http://localhost:8080

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results-${{ matrix.scenario }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

      - name: Upload failure screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-screenshots-${{ matrix.scenario }}
          path: test-results/
          retention-days: 7

      - name: Stop Docker containers
        if: always()
        run: docker compose -f tests/docker/docker-compose.test.yml down -v

  test-https-scenarios:
    runs-on: ubuntu-latest
    name: Test HTTPS Scenarios

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Generate SSL certificates
        run: |
          mkdir -p tests/docker/ssl
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout tests/docker/ssl/key.pem \
            -out tests/docker/ssl/cert.pem \
            -subj "/C=US/ST=Test/L=Test/O=Test/CN=localhost"

      - name: Start Docker containers with HTTPS
        run: |
          docker compose -f tests/docker/docker-compose.test.yml up -d
          echo "Waiting for services to be ready..."
          sleep 30

      - name: Setup WordPress
        run: |
          docker compose -f tests/docker/docker-compose.test.yml exec -T wordpress wp core install \
            --url=https://localhost \
            --title="JWT Test Site HTTPS" \
            --admin_user=admin \
            --admin_password=admin \
            --admin_email=admin@example.com \
            --skip-email

      - name: Activate plugin
        run: |
          docker compose -f tests/docker/docker-compose.test.yml exec -T wordpress wp plugin activate jwt-auth-pro-wp-rest-api

      - name: Run HTTPS tests
        run: npm run test:e2e -- --project=https
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: https://localhost
          PLAYWRIGHT_API_URL: https://localhost

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results-https
          path: |
            playwright-report/
            test-results/
          retention-days: 7

      - name: Stop Docker containers
        if: always()
        run: docker compose -f tests/docker/docker-compose.test.yml down -v

  report:
    runs-on: ubuntu-latest
    needs: [test-cookie-scenarios, test-https-scenarios]
    if: always()
    name: Generate Test Report

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-results

      - name: Merge Playwright reports
        run: |
          npx playwright merge-reports --reporter html all-results/playwright-results-*/

      - name: Upload merged report
        uses: actions/upload-artifact@v4
        with:
          name: final-playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const scenarios = ['same-domain', 'cross-origin', 'auto-detect', 'strict-production'];

            let comment = '## Cookie Scenario Test Results\n\n';
            comment += '| Scenario | Status |\n';
            comment += '|----------|--------|\n';

            scenarios.forEach(scenario => {
              const status = '${{ needs.test-cookie-scenarios.result }}' === 'success' ? '✅ Passed' : '❌ Failed';
              comment += `| ${scenario} | ${status} |\n`;
            });

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
